Factory Design Pattern
This is a python translation of the content available in Java with minor comments as not much clear python LLD content is easily accessible.


https://www.geeksforgeeks.org/factory-method-for-designing-pattern/


Consider a software application that needs to handle the creation of various types of vehicles, such as Two Wheelers, Three Wheelers, and Four Wheelers. Each type of vehicle has its own specific properties and behaviors.


Without Factory Pattern :


# Abstract base class
from abc import ABC, abstractmethod

class Vehicle(ABC):
    @abstractmethod
    def print_vehicle(self):
        pass

class TwoWheeler(Vehicle):
    def print_vehicle(self):
        print("I am two wheeler")

class FourWheeler(Vehicle):
    def print_vehicle(self):
        print("I am four wheeler")

# Client class
class Client:
    def __init__(self, v_type):
        if v_type == 1:
            self.p_vehicle = TwoWheeler()
        elif v_type == 2:
            self.p_vehicle = FourWheeler()
        else:
            self.p_vehicle = None
            
    def get_vehicle(self):
        return self.p_vehicle

# Driver program
def main():
    p_client = Client(1)
    p_vehicle = p_client.get_vehicle()
    if p_vehicle is not None:
        p_vehicle.print_vehicle()
    p_client.cleanup()

if __name__ == "__main__":
    main()
Client class creates TwoWheeler and FourWheeler objects directly based on input.
This strong dependency makes the code hard to maintain or update.
To add a new vehicle type, you must modify the Client class, which makes it difficult to scale the design. This conflicts with the idea that classes should be open for extension but closed for modification.
Better Approach with Factory Pattern :


from abc import ABC, abstractmethod

class Vehicle(ABC):
    @abstractmethod
    def print_vehicle(self):
        pass
    
class TwoWheeler(Vehicle):
    def print_vehicle(self):
        print("I am two wheeler")

class FourWheeler(Vehicle):
    def print_vehicle(self):
        print("I am four wheeler")

class VehicleFactory(ABC):
    @abstractmethod
    def create_vehicle(self):
        pass

class TwoWheelerFactory(VehicleFactory):
    def create_vehicle(self):
        return TwoWheeler()
    
class FourWheelerFactory(VehicleFactory):
    def create_vehicle(self):
        return FourWheeler()
    
class Client:
    def __init__(self, factory):
        self.p_vehicle = factory.create_vehicle()
    def get_vehicle(self):
        return self.p_vehicle
    
def main():
    two_wheeler_factory = TwoWheelerFactory()
    two_wheeler_client = Client(two_wheeler_factory)
    two_wheeler = two_wheeler_client.get_vehicle()
    two_wheeler.print_vehicle()
    
if __name__ == "__main__":
    main()
        
Advantages of the Factory Method


Separates creation logic from client code, improving flexibility.
New product types can be added easily.
Simplifies unit testing by allowing mock product creation.
Centralizes object creation logic across the application.
Hides specific product classes from clients, reducing dependency.
Disadvantages of the Factory Method


Adds more classes and interfaces, which can complicate maintenance.
Slight performance impacts due to polymorphism.
Concrete creators are linked to their products.
Clients need knowledge of specific subclasses.
May lead to unnecessary complexity if applied too broadly.
Factory logic can be harder to test.
